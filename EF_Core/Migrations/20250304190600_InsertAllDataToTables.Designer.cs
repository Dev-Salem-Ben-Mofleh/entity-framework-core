// <auto-generated />
using System;
using EF_Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250304190600_InsertAllDataToTables")]
    partial class InsertAllDataToTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_Core.Entity.BeltRank", b =>
                {
                    b.Property<int>("BeltRankID")
                        .HasColumnType("int");

                    b.Property<string>("RankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("TestFees")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("BeltRankID");

                    b.ToTable("BeltRanks", (string)null);

                    b.HasData(
                        new
                        {
                            BeltRankID = 1,
                            RankName = "White Belt",
                            TestFees = 50.0000m
                        },
                        new
                        {
                            BeltRankID = 2,
                            RankName = "Yellow Belt",
                            TestFees = 60.0000m
                        },
                        new
                        {
                            BeltRankID = 3,
                            RankName = "Orange Belt",
                            TestFees = 70.0000m
                        },
                        new
                        {
                            BeltRankID = 4,
                            RankName = "Green Belt",
                            TestFees = 80.0000m
                        },
                        new
                        {
                            BeltRankID = 5,
                            RankName = "Blue Belt",
                            TestFees = 90.0000m
                        },
                        new
                        {
                            BeltRankID = 6,
                            RankName = "Purple Belt",
                            TestFees = 100.0000m
                        },
                        new
                        {
                            BeltRankID = 7,
                            RankName = "Brown Belt",
                            TestFees = 110.0000m
                        },
                        new
                        {
                            BeltRankID = 8,
                            RankName = "Black Belt (1nd Dan)",
                            TestFees = 120.0000m
                        },
                        new
                        {
                            BeltRankID = 9,
                            RankName = "Black Belt (2nd Dan)",
                            TestFees = 130.0000m
                        },
                        new
                        {
                            BeltRankID = 10,
                            RankName = "Black Belt (3nd Dan)",
                            TestFees = 140.0000m
                        },
                        new
                        {
                            BeltRankID = 11,
                            RankName = "Black Belt (4nd Dan)",
                            TestFees = 150.0000m
                        },
                        new
                        {
                            BeltRankID = 12,
                            RankName = "Black Belt (5nd Dan)",
                            TestFees = 160.0000m
                        },
                        new
                        {
                            BeltRankID = 13,
                            RankName = "Black Belt (6nd Dan)",
                            TestFees = 170.0000m
                        },
                        new
                        {
                            BeltRankID = 14,
                            RankName = "Black Belt (7nd Dan)",
                            TestFees = 180.0000m
                        },
                        new
                        {
                            BeltRankID = 15,
                            RankName = "Black Belt (8nd Dan)",
                            TestFees = 190.0000m
                        },
                        new
                        {
                            BeltRankID = 16,
                            RankName = "Black Belt (9nd Dan)",
                            TestFees = 200.0000m
                        },
                        new
                        {
                            BeltRankID = 17,
                            RankName = "Black Belt (10nd Dan)",
                            TestFees = 210.0000m
                        });
                });

            modelBuilder.Entity("EF_Core.Entity.BeltTest", b =>
                {
                    b.Property<int>("BeltTestID")
                        .HasColumnType("int");

                    b.Property<int>("BeltRankID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentID")
                        .HasColumnType("int");

                    b.Property<bool>("Result")
                        .HasColumnType("bit");

                    b.HasKey("BeltTestID");

                    b.HasIndex("BeltRankID");

                    b.HasIndex("InstructorID");

                    b.HasIndex("MemberID");

                    b.HasIndex("PaymentID")
                        .IsUnique()
                        .HasFilter("[PaymentID] IS NOT NULL");

                    b.ToTable("BeltTests", (string)null);

                    b.HasData(
                        new
                        {
                            BeltTestID = 2,
                            BeltRankID = 1,
                            Date = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 9,
                            MemberID = 3,
                            PaymentID = 17,
                            Result = true
                        },
                        new
                        {
                            BeltTestID = 3,
                            BeltRankID = 2,
                            Date = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 9,
                            MemberID = 3,
                            PaymentID = 18,
                            Result = false
                        },
                        new
                        {
                            BeltTestID = 4,
                            BeltRankID = 2,
                            Date = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 7,
                            MemberID = 3,
                            PaymentID = 19,
                            Result = false
                        },
                        new
                        {
                            BeltTestID = 5,
                            BeltRankID = 2,
                            Date = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 7,
                            MemberID = 3,
                            PaymentID = 20,
                            Result = true
                        },
                        new
                        {
                            BeltTestID = 6,
                            BeltRankID = 6,
                            Date = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 9,
                            MemberID = 3,
                            PaymentID = 21,
                            Result = true
                        },
                        new
                        {
                            BeltTestID = 11,
                            BeltRankID = 7,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 40,
                            MemberID = 38,
                            PaymentID = 32,
                            Result = true
                        },
                        new
                        {
                            BeltTestID = 12,
                            BeltRankID = 8,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 41,
                            MemberID = 38,
                            PaymentID = 33,
                            Result = true
                        },
                        new
                        {
                            BeltTestID = 13,
                            BeltRankID = 9,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 40,
                            MemberID = 38,
                            PaymentID = 34,
                            Result = true
                        },
                        new
                        {
                            BeltTestID = 14,
                            BeltRankID = 1,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 40,
                            MemberID = 39,
                            PaymentID = 35,
                            Result = false
                        },
                        new
                        {
                            BeltTestID = 15,
                            BeltRankID = 1,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 41,
                            MemberID = 39,
                            PaymentID = 36,
                            Result = true
                        },
                        new
                        {
                            BeltTestID = 16,
                            BeltRankID = 2,
                            Date = new DateTime(2024, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 41,
                            MemberID = 39,
                            PaymentID = 37,
                            Result = true
                        },
                        new
                        {
                            BeltTestID = 17,
                            BeltRankID = 2,
                            Date = new DateTime(2024, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 40,
                            MemberID = 39,
                            PaymentID = 38,
                            Result = true
                        });
                });

            modelBuilder.Entity("EF_Core.Entity.MemberInstructor", b =>
                {
                    b.Property<int>("MemberInstructorID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.HasKey("MemberInstructorID");

                    b.HasIndex("InstructorID");

                    b.HasIndex("MemberID");

                    b.ToTable("MemberInstructors", (string)null);

                    b.HasData(
                        new
                        {
                            MemberInstructorID = 1,
                            AssignDate = new DateTime(2024, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 6,
                            MemberID = 3
                        },
                        new
                        {
                            MemberInstructorID = 7,
                            AssignDate = new DateTime(2024, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 9,
                            MemberID = 3
                        },
                        new
                        {
                            MemberInstructorID = 8,
                            AssignDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 34,
                            MemberID = 33
                        },
                        new
                        {
                            MemberInstructorID = 9,
                            AssignDate = new DateTime(2024, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 7,
                            MemberID = 21
                        },
                        new
                        {
                            MemberInstructorID = 10,
                            AssignDate = new DateTime(2024, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 7,
                            MemberID = 33
                        },
                        new
                        {
                            MemberInstructorID = 11,
                            AssignDate = new DateTime(2024, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 7,
                            MemberID = 3
                        },
                        new
                        {
                            MemberInstructorID = 12,
                            AssignDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 41,
                            MemberID = 39
                        },
                        new
                        {
                            MemberInstructorID = 13,
                            AssignDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 40,
                            MemberID = 39
                        },
                        new
                        {
                            MemberInstructorID = 14,
                            AssignDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 40,
                            MemberID = 38
                        },
                        new
                        {
                            MemberInstructorID = 15,
                            AssignDate = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 34,
                            MemberID = 38
                        },
                        new
                        {
                            MemberInstructorID = 16,
                            AssignDate = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 40,
                            MemberID = 36
                        },
                        new
                        {
                            MemberInstructorID = 18,
                            AssignDate = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstructorID = 41,
                            MemberID = 38
                        });
                });

            modelBuilder.Entity("EF_Core.Entity.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<byte>("PaymentFor")
                        .HasColumnType("tinyint");

                    b.HasKey("PaymentID");

                    b.HasIndex("MemberID");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            PaymentID = 1,
                            Amount = 20.00m,
                            Date = new DateTime(2024, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 3,
                            PaymentFor = (byte)1
                        },
                        new
                        {
                            PaymentID = 6,
                            Amount = 60.00m,
                            Date = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 21,
                            PaymentFor = (byte)1
                        },
                        new
                        {
                            PaymentID = 14,
                            Amount = 50.00m,
                            Date = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 3,
                            PaymentFor = (byte)1
                        },
                        new
                        {
                            PaymentID = 17,
                            Amount = 60.00m,
                            Date = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 3,
                            PaymentFor = (byte)2
                        },
                        new
                        {
                            PaymentID = 18,
                            Amount = 60.00m,
                            Date = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 3,
                            PaymentFor = (byte)2
                        },
                        new
                        {
                            PaymentID = 19,
                            Amount = 60.00m,
                            Date = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 3,
                            PaymentFor = (byte)2
                        },
                        new
                        {
                            PaymentID = 20,
                            Amount = 60.00m,
                            Date = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 3,
                            PaymentFor = (byte)2
                        },
                        new
                        {
                            PaymentID = 21,
                            Amount = 70.00m,
                            Date = new DateTime(2024, 6, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 3,
                            PaymentFor = (byte)2
                        },
                        new
                        {
                            PaymentID = 22,
                            Amount = 200.00m,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 39,
                            PaymentFor = (byte)1
                        },
                        new
                        {
                            PaymentID = 23,
                            Amount = 400.00m,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 38,
                            PaymentFor = (byte)1
                        },
                        new
                        {
                            PaymentID = 24,
                            Amount = 300.00m,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 36,
                            PaymentFor = (byte)1
                        },
                        new
                        {
                            PaymentID = 25,
                            Amount = 70.00m,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 21,
                            PaymentFor = (byte)1
                        },
                        new
                        {
                            PaymentID = 26,
                            Amount = 60.00m,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 21,
                            PaymentFor = (byte)1
                        },
                        new
                        {
                            PaymentID = 27,
                            Amount = 60.00m,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 21,
                            PaymentFor = (byte)1
                        },
                        new
                        {
                            PaymentID = 32,
                            Amount = 110.00m,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 38,
                            PaymentFor = (byte)2
                        },
                        new
                        {
                            PaymentID = 33,
                            Amount = 120.00m,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 38,
                            PaymentFor = (byte)2
                        },
                        new
                        {
                            PaymentID = 34,
                            Amount = 130.00m,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 38,
                            PaymentFor = (byte)2
                        },
                        new
                        {
                            PaymentID = 35,
                            Amount = 50.00m,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 39,
                            PaymentFor = (byte)2
                        },
                        new
                        {
                            PaymentID = 36,
                            Amount = 50.00m,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 39,
                            PaymentFor = (byte)2
                        },
                        new
                        {
                            PaymentID = 37,
                            Amount = 60.00m,
                            Date = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 39,
                            PaymentFor = (byte)2
                        },
                        new
                        {
                            PaymentID = 38,
                            Amount = 70.00m,
                            Date = new DateTime(2024, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MemberID = 39,
                            PaymentFor = (byte)2
                        });
                });

            modelBuilder.Entity("EF_Core.Entity.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.HasKey("PersonID");

                    b.ToTable("Persons", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EF_Core.Entity.SubscriptionPeriod", b =>
                {
                    b.Property<int>("SubscriptionPeriodID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fees")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("IssueReason")
                        .HasColumnType("tinyint");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("SubscrpitonDays")
                        .HasColumnType("tinyint");

                    b.HasKey("SubscriptionPeriodID");

                    b.HasIndex("MemberID");

                    b.ToTable("SubscriptionPeriod", (string)null);

                    b.HasData(
                        new
                        {
                            SubscriptionPeriodID = 1,
                            EndDate = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 50.0000m,
                            IsActive = false,
                            IssueReason = (byte)1,
                            MemberID = 3,
                            Paid = true,
                            PaymentID = 1,
                            StartDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscrpitonDays = (byte)30
                        },
                        new
                        {
                            SubscriptionPeriodID = 9,
                            EndDate = new DateTime(2024, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 60.0000m,
                            IsActive = false,
                            IssueReason = (byte)1,
                            MemberID = 21,
                            Paid = true,
                            PaymentID = 6,
                            StartDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscrpitonDays = (byte)38
                        },
                        new
                        {
                            SubscriptionPeriodID = 14,
                            EndDate = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 70.0000m,
                            IsActive = false,
                            IssueReason = (byte)1,
                            MemberID = 21,
                            Paid = true,
                            PaymentID = 25,
                            StartDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscrpitonDays = (byte)30
                        },
                        new
                        {
                            SubscriptionPeriodID = 19,
                            EndDate = new DateTime(2024, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 50.0000m,
                            IsActive = false,
                            IssueReason = (byte)1,
                            MemberID = 3,
                            Paid = true,
                            PaymentID = 14,
                            StartDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscrpitonDays = (byte)30
                        },
                        new
                        {
                            SubscriptionPeriodID = 25,
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 200.0000m,
                            IsActive = false,
                            IssueReason = (byte)1,
                            MemberID = 39,
                            Paid = true,
                            PaymentID = 22,
                            StartDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscrpitonDays = (byte)48
                        },
                        new
                        {
                            SubscriptionPeriodID = 26,
                            EndDate = new DateTime(2024, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 400.0000m,
                            IsActive = false,
                            IssueReason = (byte)1,
                            MemberID = 38,
                            Paid = true,
                            PaymentID = 23,
                            StartDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscrpitonDays = (byte)30
                        },
                        new
                        {
                            SubscriptionPeriodID = 28,
                            EndDate = new DateTime(2024, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 300.0000m,
                            IsActive = false,
                            IssueReason = (byte)1,
                            MemberID = 36,
                            Paid = true,
                            PaymentID = 24,
                            StartDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscrpitonDays = (byte)30
                        },
                        new
                        {
                            SubscriptionPeriodID = 29,
                            EndDate = new DateTime(2024, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 300.0000m,
                            IsActive = false,
                            IssueReason = (byte)1,
                            MemberID = 37,
                            Paid = true,
                            StartDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscrpitonDays = (byte)30
                        },
                        new
                        {
                            SubscriptionPeriodID = 30,
                            EndDate = new DateTime(2024, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 60.0000m,
                            IsActive = false,
                            IssueReason = (byte)2,
                            MemberID = 21,
                            Paid = true,
                            PaymentID = 26,
                            StartDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscrpitonDays = (byte)38
                        },
                        new
                        {
                            SubscriptionPeriodID = 31,
                            EndDate = new DateTime(2024, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 60.0000m,
                            IsActive = false,
                            IssueReason = (byte)2,
                            MemberID = 21,
                            Paid = true,
                            PaymentID = 27,
                            StartDate = new DateTime(2024, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscrpitonDays = (byte)38
                        },
                        new
                        {
                            SubscriptionPeriodID = 33,
                            EndDate = new DateTime(2025, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fees = 35.0000m,
                            IsActive = true,
                            IssueReason = (byte)2,
                            MemberID = 21,
                            Paid = true,
                            PaymentID = 27,
                            StartDate = new DateTime(2025, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubscrpitonDays = (byte)34
                        });
                });

            modelBuilder.Entity("EF_Core.Entity.Instructor", b =>
                {
                    b.HasBaseType("EF_Core.Entity.Person");

                    b.Property<string>("Qualification")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.ToTable("Instructors", (string)null);

                    b.HasData(
                        new
                        {
                            PersonID = 6,
                            Address = "2Street",
                            DateOfBirth = new DateTime(2005, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Saleh",
                            Phone = "71829388",
                            Qualification = "Belt"
                        },
                        new
                        {
                            PersonID = 7,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)2,
                            Name = "Salwa",
                            Phone = "77829388",
                            Qualification = "Belt"
                        },
                        new
                        {
                            PersonID = 9,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Mohammed",
                            Phone = "77829388",
                            Qualification = "Win Teakwindo"
                        },
                        new
                        {
                            PersonID = 34,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Faisle",
                            Phone = "77829388",
                            Qualification = "Belt Champions"
                        },
                        new
                        {
                            PersonID = 40,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Faozy",
                            Phone = "77829388",
                            Qualification = "Belt Win"
                        },
                        new
                        {
                            PersonID = 41,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)0,
                            Name = "Rima Waled",
                            Phone = "77829388"
                        });
                });

            modelBuilder.Entity("EF_Core.Entity.Member", b =>
                {
                    b.HasBaseType("EF_Core.Entity.Person");

                    b.Property<string>("EmergencyContactInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LastBeltRankID")
                        .HasColumnType("int");

                    b.HasIndex("LastBeltRankID");

                    b.ToTable("Members", (string)null);

                    b.HasData(
                        new
                        {
                            PersonID = 3,
                            Address = "Cinma Street",
                            DateOfBirth = new DateTime(2004, 5, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Ali @gmail.com",
                            Gender = (byte)1,
                            Name = "Ali Ahemd",
                            Phone = "77829388",
                            EmergencyContactInfo = "343434",
                            IsActive = true,
                            LastBeltRankID = 4
                        },
                        new
                        {
                            PersonID = 4,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = " Ahmed",
                            Phone = "77823388",
                            EmergencyContactInfo = "343434",
                            IsActive = false,
                            LastBeltRankID = 1
                        },
                        new
                        {
                            PersonID = 21,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Waled",
                            Phone = "77829388",
                            EmergencyContactInfo = "343434",
                            IsActive = true,
                            LastBeltRankID = 3
                        },
                        new
                        {
                            PersonID = 33,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Fahed Ahmed",
                            Phone = "77829388",
                            EmergencyContactInfo = "343434",
                            IsActive = true,
                            LastBeltRankID = 5
                        },
                        new
                        {
                            PersonID = 36,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Omar Ali",
                            Phone = "77829388",
                            EmergencyContactInfo = "343434",
                            IsActive = true,
                            LastBeltRankID = 1
                        },
                        new
                        {
                            PersonID = 37,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Mohand Faisle",
                            Phone = "77829388",
                            EmergencyContactInfo = "343434",
                            IsActive = true,
                            LastBeltRankID = 1
                        },
                        new
                        {
                            PersonID = 38,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Khaled Waled",
                            Phone = "77829388",
                            EmergencyContactInfo = "343434",
                            IsActive = true,
                            LastBeltRankID = 10
                        },
                        new
                        {
                            PersonID = 39,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)0,
                            Name = "Zahrh Ahmed",
                            Phone = "77829388",
                            EmergencyContactInfo = "343434",
                            IsActive = true,
                            LastBeltRankID = 4
                        });
                });

            modelBuilder.Entity("EF_Core.Entity.User", b =>
                {
                    b.HasBaseType("EF_Core.Entity.Person");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<byte>("Permission")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            PersonID = 1,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Salem",
                            Phone = "77829388",
                            IsActive = true,
                            Password = "1111",
                            Permission = (byte)1,
                            UserName = "s123"
                        },
                        new
                        {
                            PersonID = 25,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "Hadi",
                            Phone = "77829388",
                            IsActive = true,
                            Password = "1111",
                            Permission = (byte)1,
                            UserName = "s123"
                        },
                        new
                        {
                            PersonID = 42,
                            Address = "1Street",
                            DateOfBirth = new DateTime(2005, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = (byte)1,
                            Name = "ALi Faozy",
                            Phone = "77829388",
                            IsActive = true,
                            Password = "1111",
                            Permission = (byte)1,
                            UserName = "s123"
                        });
                });

            modelBuilder.Entity("EF_Core.Entity.BeltTest", b =>
                {
                    b.HasOne("EF_Core.Entity.BeltRank", "BeltRank")
                        .WithMany("BeltTests")
                        .HasForeignKey("BeltRankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core.Entity.Instructor", "Instructor")
                        .WithMany("BeltTests")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core.Entity.Member", "Member")
                        .WithMany("BeltTests")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core.Entity.Payment", "Payment")
                        .WithOne("BeltTest")
                        .HasForeignKey("EF_Core.Entity.BeltTest", "PaymentID");

                    b.Navigation("BeltRank");

                    b.Navigation("Instructor");

                    b.Navigation("Member");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("EF_Core.Entity.MemberInstructor", b =>
                {
                    b.HasOne("EF_Core.Entity.Instructor", null)
                        .WithMany("MemberInstructors")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core.Entity.Member", null)
                        .WithMany("MemberInstructors")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Core.Entity.Payment", b =>
                {
                    b.HasOne("EF_Core.Entity.Member", "Member")
                        .WithMany("Payments")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("EF_Core.Entity.SubscriptionPeriod", b =>
                {
                    b.HasOne("EF_Core.Entity.Member", "Member")
                        .WithMany("SubscriptionPeriods")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("EF_Core.Entity.Instructor", b =>
                {
                    b.HasOne("EF_Core.Entity.Person", null)
                        .WithOne()
                        .HasForeignKey("EF_Core.Entity.Instructor", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Core.Entity.Member", b =>
                {
                    b.HasOne("EF_Core.Entity.BeltRank", "BeltRank")
                        .WithMany("Members")
                        .HasForeignKey("LastBeltRankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core.Entity.Person", null)
                        .WithOne()
                        .HasForeignKey("EF_Core.Entity.Member", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BeltRank");
                });

            modelBuilder.Entity("EF_Core.Entity.User", b =>
                {
                    b.HasOne("EF_Core.Entity.Person", null)
                        .WithOne()
                        .HasForeignKey("EF_Core.Entity.User", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Core.Entity.BeltRank", b =>
                {
                    b.Navigation("BeltTests");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("EF_Core.Entity.Payment", b =>
                {
                    b.Navigation("BeltTest")
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Core.Entity.Instructor", b =>
                {
                    b.Navigation("BeltTests");

                    b.Navigation("MemberInstructors");
                });

            modelBuilder.Entity("EF_Core.Entity.Member", b =>
                {
                    b.Navigation("BeltTests");

                    b.Navigation("MemberInstructors");

                    b.Navigation("Payments");

                    b.Navigation("SubscriptionPeriods");
                });
#pragma warning restore 612, 618
        }
    }
}
